#name of the work flow
name: build-and-lint

#defined when this workflow runs
on:
  push:  #when push to these branches
    branches: [main, dev]
  pull_request: #when pull from these branches
    branches: [main, dev]

#defined the job
jobs:
  build-and-lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # üß© Backend
      - name: Install backend deps
        working-directory: server
        run: npm ci

      - name: Lint backend
        working-directory: server
        run: npm run lint -- --max-warnings=0

      # üß© Frontend
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      - name: Lint frontend
        working-directory: frontend
        run: npm run lint -- --max-warnings=0

      # üê≥ Docker builds
      - name: Build backend Docker image
        run: docker build -t backend ./server

      - name: Build frontend Docker image
        run: docker build -t frontend ./frontend
      
  deploy:
    needs: build-and-lint
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Write SSH key
        run: |
          echo "${EC2_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_APP_DIR: ${{ secrets.EC2_APP_DIR }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${EC2_USER}@${EC2_HOST} "
            set -e
            cd ${EC2_APP_DIR}
            echo '‚úÖ Current directory:' && pwd
            echo 'üìÅ Contents:' && ls -la
            
            # Fetch latest code
            git fetch --all
            git reset --hard origin/main

            # Rebuild containers
            docker compose up -d --build

            # Clean old images
            docker image prune -f

            # Check running containers
            docker compose ps
          "
